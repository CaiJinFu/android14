/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package android.os.statsd.telephony;

import "frameworks/proto_logging/stats/atom_field_options.proto";
import "frameworks/proto_logging/stats/atoms.proto";
import "frameworks/proto_logging/stats/enums/telephony/enums.proto";
import "frameworks/proto_logging/stats/enums/telephony/satellite/enums.proto";

option java_package = "com.android.os.telephony";
option java_multiple_files = true;

extend Atom {
  optional SatelliteController satellite_controller = 10182
  [(module) = "telephony"];
  optional SatelliteSession satellite_session = 10183
  [(module) = "telephony"];
  optional SatelliteIncomingDatagram satellite_incoming_datagram = 10184
  [(module) = "telephony"];
  optional SatelliteOutgoingDatagram satellite_outgoing_datagram = 10185
  [(module) = "telephony"];
  optional SatelliteProvision satellite_provision = 10186
  [(module) = "telephony"];
  optional SatelliteSosMessageRecommender satellite_sos_message_recommender = 10187
  [(module) = "telephony"];
}

/**
 * One data point of this metric is logged per day if the satellite is enabled
 * or provisioned/deprovisioned at least once
 */
message SatelliteController {
  // Total count of successful attempts for turning on satellite service.
  optional int32 count_of_satellite_service_enablements_success = 1;
  // Total count of failed attempts for turning on satellite service.
  optional int32 count_of_satellite_service_enablements_fail = 2;
  // Total count of successful attempt for outgoing datagrams.
  optional int32 count_of_outgoing_datagram_success = 3;
  // Total count of failed attempts for outgoing datagrams.
  optional int32 count_of_outgoing_datagram_fail = 4;
  // Total count of successful attempt for incoming datagrams.
  optional int32 count_of_incoming_datagram_success = 5;
  // Total count of failed attempts for incoming datagrams.
  optional int32 count_of_incoming_datagram_fail = 6;
  // Total count of successful attempts for transferring SOS SMS.
  optional int32 count_of_datagram_type_sos_sms_success = 7;
  // Total count of failed attempts for transferring SOS SMS.
  optional int32 count_of_datagram_type_sos_sms_fail = 8;
  // Total count of successful attempts for transferring location sharing.
  optional int32 count_of_datagram_type_location_sharing_success = 9;
  // Total count of failed attempts for transferring location sharing.
  optional int32 count_of_datagram_type_location_sharing_fail = 10;
  // Total count of successful attempt for provisioning.
  optional int32 count_of_provision_success = 11;
  // Total count of failed attempts for provisioning.
  optional int32 count_of_provision_fail = 12;
  // Total count of successful attempts for deprovisioning.
  optional int32 count_of_deprovision_success = 13;
  // Total count of failed attempts for deprovisioning.
  optional int32 count_of_deprovision_fail = 14;
  // The sum of all duration from the satellite is turned on until it is turned off in seconds.
  optional int32 total_service_uptime_sec = 15;
  // The amount of battery consumption, while the satellite state is on.
  // excluded while in charging state rounded to percent.
  optional int32 total_battery_consumption_percent = 16;
  // The total duration of the battery being charged while satellite modem is on
  optional int32 total_battery_charged_time_sec = 17;
}

/**
 * One data point of this metric is logged per satellite enablement
 */
message SatelliteSession {
  // The result for satellite modem initialization.
  optional android.telephony.SatelliteError satellite_service_initialization_result = 1;
  // Satellite technology to datagram transfer.
  optional android.telephony.NTRadioTechnology satellite_technology = 2;
  // Total count of times this event has occurred.
  optional int32 count = 3;
}

/**
 * Snapshot of satellite incoming datagram
 */
message SatelliteIncomingDatagram {
  // Return code in receiving the datagram.
  optional android.telephony.SatelliteError result_code = 1;
  // The size of the datagram in bytes.
  optional int32 datagram_size_bytes = 2;
  // The amount of time took to receive the datagram.
  optional int64 datagram_transfer_time_millis = 3;
}

/**
 * Snapshot of satellite outgoing datagram
 */
message SatelliteOutgoingDatagram {
  // Feature type of datagram.
  optional android.telephony.DatagramType satellite_datagram_type = 1;
  // Return code in sending the datagram.
  optional android.telephony.SatelliteError result_code = 2;
  // The size of the datagram in bytes.
  optional int32 datagram_size_bytes = 3;
  // The amount of time took to send the datagram.
  optional int64 datagram_transfer_time_millis = 4;
}

/**
 * Stats about the provision/deprovision result for satellite service
 */
message SatelliteProvision {
  // The result of satellite service provision/deprovision.
  optional android.telephony.SatelliteError result_code = 1;
  // The amount of time in seconds from start to complete provision/deprovision.
  optional int32 processing_time_sec = 2;
  // Indicator whether this is for provision/deprovision.
  // true means a provision request, and false means a deprovision request.
  optional bool is_provision_request = 3;
  // Whether the provisioning request was canceled.
  optional bool is_canceled = 4;
}

/**
 * Snapshot of satellite SOS message recommender
 */
message SatelliteSosMessageRecommender {
  // Whether the Dialer is notified with the event DISPLAY_SOS_MESSAGE.
  optional bool is_display_sos_message_sent = 1;
  // Number of times the timer is started.
  optional int32 count_of_timer_started = 2;
  // Whether IMS is registered.
  optional bool is_ims_registered = 3;
  // The cellular service state.
  optional android.telephony.ServiceStateEnum cellular_service_state = 4;
  // Total count of times this event has occurred.
  optional int32 count = 5;
}