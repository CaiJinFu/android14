/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.federatedcompute.services.common;

import com.android.ondevicepersonalization.internal.util.DataClass;

/** A constraint on the task when to run again. */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public class TaskRetry {
    private final long mMinDelay;
    private final long mMaxDelay;

    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen
    // $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/federatedcompute/src/com/android/federatedcompute/services/common/TaskRetry.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    // @formatter:off

    @DataClass.Generated.Member
    /* package-private */ TaskRetry(long minDelay, long maxDelay) {
        this.mMinDelay = minDelay;
        this.mMaxDelay = maxDelay;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public long getMinDelay() {
        return mMinDelay;
    }

    @DataClass.Generated.Member
    public long getMaxDelay() {
        return mMaxDelay;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(TaskRetry other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        TaskRetry that = (TaskRetry) o;
        //noinspection PointlessBooleanExpression
        return true && mMinDelay == that.mMinDelay && mMaxDelay == that.mMaxDelay;
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + Long.hashCode(mMinDelay);
        _hash = 31 * _hash + Long.hashCode(mMaxDelay);
        return _hash;
    }

    /** A builder for {@link TaskRetry} */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static class Builder {

        private long mMinDelay;
        private long mMaxDelay;

        private long mBuilderFieldsSet = 0L;

        public Builder() {}

        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setMinDelay(long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mMinDelay = value;
            return this;
        }

        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setMaxDelay(long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mMaxDelay = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @android.annotation.NonNull TaskRetry build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4; // Mark builder used

            TaskRetry o = new TaskRetry(mMinDelay, mMaxDelay);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x4) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    // @formatter:on
    // End of generated code

}
