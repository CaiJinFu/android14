/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.adservices.data.adselection;

import android.adservices.common.FrequencyCapFilters;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

import com.android.adservices.service.adselection.HistogramEvent;

import com.google.auto.value.AutoValue;

import java.time.Instant;
import java.util.Objects;

/**
 * POJO for a single ad event which was registered by an adtech.
 *
 * <p>These events are used to compute frequency histograms to be used during ad selection
 * filtering.
 */
@AutoValue
@AutoValue.CopyAnnotations
@Entity(tableName = DBHistogramEventData.TABLE_NAME, inheritSuperIndices = true)
public abstract class DBHistogramEventData {
    public static final String TABLE_NAME = "fcap_histogram_data";

    /**
     * Returns the internal row ID of the event data in the histogram event data datastore.
     *
     * <p>This ID is only used internally in the frequency cap histogram event data table and does
     * not need to be stable or reproducible. It is auto-generated by Room if set to {@code null} on
     * insertion.
     */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "row_id")
    @PrimaryKey(autoGenerate = true)
    @Nullable
    public abstract Long getRowId();

    /**
     * Returns the numerical ID linking this event data to its associated {@link
     * DBHistogramIdentifier}.
     *
     * <p>This ID is only used internally in the frequency cap histogram tables and does not need to
     * be stable or reproducible.
     */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "foreign_key_id", index = true)
    public abstract long getHistogramIdentifierForeignKey();

    /** Returns the enumerated type of the ad event. */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "ad_event_type", index = true)
    @FrequencyCapFilters.AdEventType
    public abstract int getAdEventType();

    /** Returns the timestamp for the event. */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "timestamp", index = true)
    @NonNull
    public abstract Instant getTimestamp();

    /** Returns an AutoValue builder for a {@link DBHistogramEventData} object. */
    @NonNull
    public static DBHistogramEventData.Builder builder() {
        return new AutoValue_DBHistogramEventData.Builder().setRowId(null);
    }

    /**
     * Creates a {@link DBHistogramEventData} object using the builder.
     *
     * <p>Required for Room SQLite integration.
     */
    @NonNull
    public static DBHistogramEventData create(
            @Nullable Long rowId,
            long histogramIdentifierForeignKey,
            @FrequencyCapFilters.AdEventType int adEventType,
            @NonNull Instant timestamp) {
        return builder()
                .setRowId(rowId)
                .setHistogramIdentifierForeignKey(histogramIdentifierForeignKey)
                .setAdEventType(adEventType)
                .setTimestamp(timestamp)
                .build();
    }

    /**
     * Creates and returns a new {@link DBHistogramEventData} object from the given foreign key ID
     * and {@link HistogramEvent}.
     */
    @NonNull
    public static DBHistogramEventData fromHistogramEvent(
            long foreignKey, @NonNull HistogramEvent event) {
        Objects.requireNonNull(event);
        return builder()
                .setHistogramIdentifierForeignKey(foreignKey)
                .setAdEventType(event.getAdEventType())
                .setTimestamp(event.getTimestamp())
                .build();
    }

    /** Builder class for a {@link DBHistogramEventData} object. */
    @AutoValue.Builder
    public abstract static class Builder {
        /**
         * Returns the internal row ID of the event data in the histogram event data datastore.
         *
         * <p>This ID is only used internally in the frequency cap histogram event data table and
         * does not need to be stable or reproducible. It is auto-generated by Room if set to {@code
         * null} on insertion.
         */
        @NonNull
        public abstract Builder setRowId(Long rowId);

        /**
         * Sets the numerical ID linking this event data to its associated {@link
         * DBHistogramIdentifier}.
         *
         * <p>This ID is only used internally in the frequency cap histogram tables and does not
         * need to be stable or reproducible.
         */
        @NonNull
        public abstract Builder setHistogramIdentifierForeignKey(
                long histogramIdentifierForeignKey);

        /** Sets the enumerated type of the ad event. */
        @NonNull
        public abstract Builder setAdEventType(int adEventType);

        /** Sets the timestamp for the event. */
        @NonNull
        public abstract Builder setTimestamp(@NonNull Instant timestamp);

        /**
         * Builds and returns the {@link DBHistogramEventData} object.
         *
         * @throws IllegalStateException if any field is unset when the object is built
         */
        @NonNull
        public abstract DBHistogramEventData build();
    }
}
