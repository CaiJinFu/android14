// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/struct.proto";

package com.android.adservices.service.proto.bidding_auction_servers;

// ProtectedAudienceInput is generated and encrypted by the client,
// passed through the untrusted Seller service, and decrypted by the
// SellerFrontEnd service.
// It is the wrapper for all of BuyerInput and other information required
// for the FLEDGE auction.
message ProtectedAudienceInput {
  // Input per buyer.
  // The key in the map corresponds to Custom Audience Owner that
  // is the Buyer / DSP. This  string that can identify a
  // buyer participating in the auction. The value corresponds to plaintext BuyerInput
  // ingested by the buyer for bidding.
  map<string, BuyerInput> buyer_input = 1;

  // This is required for scoring. It is used to construct a device (browser) signal per ad.
  // It will also be passed via GetBids to buyers for their Buyer KV lookup.
  string publisher_name = 2;

  // This is encrypted nonce passed by the client, that will be decrypted and sent back
  // to the client.
  string encrypted_nonce = 3;
}

// A BuyerInput includes data that a buyer (DSP) requires to generate bids.
message BuyerInput {
  // CustomAudience information passed from the client.
  message CustomAudience {
    reserved 7;
    // Required.
    // Name or tag of Custom Audience.
    string name = 1;

    // Required to fetch real time bidding signals from buyer's key/value
    // server.
    repeated string bidding_signals_keys = 2;

    // Optional.
    // Ids of ad_render_urls generated by the DSP / Buyer and passed to the
    // client. Then client passes this in CustomAudience if available.
    // Note: If the Buyer doesn't generate the ad_render_id, then their
    // GenerateBid() should dynamically generate the url for the bid. The
    // winning ad render url returned back to the client will be validated with
    // the Custom Audience information on the client.
    repeated int64 ad_render_ids = 3;

    // Optional.
    // Ids of ad_component_render_url(s) generated by the DSP / Buyer and passed to
    // the client.
    // Note: If the Buyer doesn't generate the ad_component_render_id, device will not
    // pass ads to Biddng and Auction services to ensure payload size is small.
    // In this case, GenerateBid() should dynamically generate the urls for component ads.
    // The winning ad render url returned back to the client will be validated with
    // the Interest Group information on the client.
    repeated int64 ad_component_render_ids = 4;

    // Optional.
    // User bidding signal that may be ingested during bidding.
    // This is a JSON array.
    // NOTE: If this is used by the Buyer for bidding, it is recommended to fetch this
    // server side from Buyer Key / Value server to keep request payload size small.
    google.protobuf.ListValue user_bidding_signals = 5;

    // A JSON string constructed by Android that includes Frequency Cap
    // information.
    string android_signals = 6;
  }
  // Custom Audiences owned by the buyer.
  repeated CustomAudience custom_audiences = 1;
}

// Protected Audience auction result returned from SellerFrontEnd to the client
// through the Seller service. It is encrypted by the SellerFrontEnd, passed
// through the untrusted Seller service and decrypted by the client. Note that
// untrusted Seller service will be unable to determine if there was a
// successful auction result, so the client must check the value of is_chaff.
message AuctionResult {
  // The ad that will be rendered on the end user's device.
  string ad_render_url = 1;

  // Name of the Custom Audience, the remarketing ad belongs to.
  string custom_audience_name = 2;

  // ETLD+1 of Buyer who owns the custom audience that includes the ad.
  string custom_audience_owner = 3;

  // Score of the ad determined during the auction. Any value that is zero or
  // negative indicates that the ad cannot win the auction. The winner of the
  // auction would be the ad that was given the highest score.
  // The output from ScoreAd() script is desirability that implies score for an
  // ad.
  float score = 4;

  // Bid price corresponding to an ad.
  float bid = 5;

  // Nonce decrypted by the SellerFrontEnd and sent back to the client.
  string nonce = 6;

  // Boolean to indicate that there is no remarketing winner from the auction.
  // AuctionResult may be ignored by the client (after decryption) if this is
  // set to true.
  bool is_chaff = 7;
}
